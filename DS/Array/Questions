/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ARRAY FIND NUM
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
An array is called Bitonic if it is comprises of an increasing sequence of integers followed immediately by a decreasing sequence of integers.
Given a bitonic array A of N distinct integers. Find a element X in it.

Input:
First line will consist  a number T, the number of test cases. First line of each test case will consist of positive integer N. Next line contains array elements and third line contains X.

Output:
Print the index where element found. If element not found, print "-1" (without quotes).

Constraints:
1 <= T <= 100
1 <= N <= 107
-107 <= Ai <= 107

Example:
Input:
1
5
1 2 7 4 3
2
Output:
1

Explanation:
Testcase 1: 2 is found at index 1 in the given array.




/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ARRAY ROTATE AND FIND MAX SUM CONFIGURATION
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class GfG
{
    int max_sum(int A[], int n)
    {
	// Your code here
	int max=0;
	int k=0;
	for(int i=0;i<n;i++){
	   rotate(A,n);
	   k=sum(A,n);
	   if(max<=k){
	       max=k;
	   }
	}
	return max;
	
    }
    void rotate(int[] arr,int n){
        int temp; 
        temp = arr[0]; 
        for (int i=0; i<n-1;i++){ 
            arr[i] = arr[i+1];
        }
        arr[n-1] = temp; 
    }
    int sum(int[] arr,int n){
        int temp=0;
        for(int i=0;i<n;i++){
            temp+=i*arr[i];
        }
        return temp;
    }
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ARRAY CHECK NUMBER OF ROTATION
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Given a sorted array A of size N. The array is rotated 'K' times. Find the value of 'K'. The array may contain duplicate elements.

Input:
The first line contains an integer T, depicting total number of test cases. T testcases follow. Each testcase contains two lines of input. The first line contains an integer N depicting the size of array. The next line contains elements of the array separated by spaces.

Output:
For each testcase, print the value of K.

Constraints:
1 <= T <= 100
1 <= N <=107
0 <= Ai <= 1018

Example:
Input
2
5
5 1 2 3 4
5
1 2 3 4 5
Output
1
0

Explanation:
Testcase1: 5 1 2 3 4. The original sorted array is 1 2 3 4 5. We can see that the array was rotated 1 times to the right.


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ROTATE
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Given an array of N size. The task is to rotate array by d elements where d is less than or equal to N.

Input:
The first line of input contains a single integer T denoting the number of test cases. Then T test cases follow. Each test case consist of three lines. The first line of each test case consists of an integer N, where N is the size of array.
The second line of each test case contains N space separated integers denoting array elements. The third line of each test case contains "d" .

Output:
Corresponding to each test case, in a new line, print the modified array.

Constraints:
1 ≤ T ≤ 200
1 ≤ N ≤ 200
1 ≤ A[i] ≤ 1000

Example:
Input
1
5
1 2 3 4 5
2

Output
3 4 5 1 2



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ROTATE AND DELETE
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Given an array arr of N integers. Do the following operation n-1 times. For every Kth operation:

Right rotate the array clockwise by 1.
Delete the (n-k+1)th last element.
Now, find the element which is left at last.

Input:
The first line of input contains an integer T denoting the number of test cases. Then T test cases follows. Each test case contains two 
lines. The first line of each test case contains an integer N. Then in the next line are N space separated values of the array A.

Output:
For each test case in a new line print the required result.

Constraints:
1 <= T <= 100
1 <= N <= 106
1 <= A[i] <= 107

Example:
Input
2
4
1 2 3 4
6
1 2 3 4 5 6

Output:
2
3

Explanation:
Testcase 2: A = {1, 2, 3, 4, 5, 6}. Rotate the array clockwise i.e. after rotation the array A = {6, 1, 2, 3, 4, 5} and delete the last
element that is {5} so A = {6, 1, 2, 3, 4}. Again rotate the array for the second time and deletes the second last element that is {2}
so A = {4, 6, 1, 3}, doing these steps when he reaches 4th time, 4th last element does not exists so he deletes 1st element ie {1}
so A={3, 6}. So continuing this procedure the last element in A is {3}, so outputp will be 3.



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ROTATE ARRAY OPTIMIZED USING 'JUGGLING' AND 'BUFFER READER'
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Given an array of size N, rotate it by D elements. 

Input: 
The first line of the input contains T denoting the number of testcases. First line of test case is the number of elements N, next line contains D. Subsequent line will be the array elements.

Output: 
For each testcase, in a new line, output the rotated array.

Constraints:
1 <= T <= 200
1 <= N <= 107
1 <= D <= N
1 <= arr[i] <= 103

Example:
Input:
2
5 2
1 2 3 4 5 
10 3
2 4 6 8 10 12 14 16 18 20

Output:
3 4 5 1 2
8 10 12 14 16 18 20 2 4 6

Explanation :
Testcase 1: 1 2 3 4 5  when rotated by 2 elements, it becomes 3 4 5 1 2







/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
REORGANIZE AN ARRAY
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Given an array of elements of length N, ranging from 0 to N-1, your task is to write a program that rearranges the elements of the array. All elements may not be present in the array, if element is not present then there will be -1 present in the array. Rearrange the array such that A[i] = i and if i is not present, display -1 at that place.

Examples:

Input : arr = {-1, -1, 6, 1, 9, 3, 2, -1, 4, -1}
Output : [-1, 1, 2, 3, 4, -1, 6, -1, -1, 9]

Input : arr = {19, 7, 0, 3, 18, 15, 12, 6, 1, 8,
              11, 10, 9, 5, 13, 16, 2, 14, 17, 4}
Output : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 
         11, 12, 13, 14, 15, 16, 17, 18, 19]
Input:
The first line of the input contains an integer T, denoting the number of test cases. Then T test case follows. The first line of each test case contains an integer N, denoting the number of elements in an array. Next line contains N space separated integers denoting the elements of the array.

Output:
For each test case output a single line containing space separated elements of the new array.

Constraints:
1<=T<=103
0<=N<=105
-1<=A[]<=N-1

Example:
Input:
2
10
-1 -1 6 1 9 3 2 -1 4 -1
3
2 0 1
Output:
-1 1 2 3 4 -1 6 -1 -1 9
0 1 2
